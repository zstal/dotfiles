# --------------------
#
# ZSH CONFIG
#
# --------------------

export LANG=en_US.UTF-8

#
# case-insensitive completion
#
autoload -Uz compinit && compinit
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

#
# version control info
#
autoload -Uz vcs_info
# Enable checking for (un)staged changes, enabling use of %u and %c
zstyle ':vcs_info:*' check-for-changes true
# Set custom strings for an unstaged vcs repo changes (*) and staged changes (+)
zstyle ':vcs_info:*' unstagedstr ' *'
zstyle ':vcs_info:*' stagedstr ' +'
# Set the format of the Git information for vcs_info
zstyle ':vcs_info:git:*' formats       '(%b%u%c) '
zstyle ':vcs_info:git:*' actionformats '(%b|%a%u%c) '
precmd() { vcs_info }

#
# prompt
#
setopt PROMPT_SUBST
PROMPT='%F{cyan}%~%f %F{yellow}${vcs_info_msg_0_}%f%F{red}%(?..[%?] )%f%# '

# preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='nano'
else
    export EDITOR='subl -w'
fi


function include() {
    # use if to avoid error code return
    if [[ -f "$1" ]]; then source "$1"; fi
}

# --------------------
#
# ALIASES
#
# --------------------

#
# config files
#
alias ,hs="subl ~/.hammerspoon/init.lua"
alias ,loc="subl ~/.local.zsh"
alias ,rc="subl ~/.zshrc"

#
# terminal and packages
#
alias bruu="brew update && brew upgrade"
alias hp="history -p && echo '✅ history cleared'"

#
# file system
#
[ -d ~/.dotfiles ] && alias dotf="cd ~/.dotfiles"
[ -d ~/Desktop ] && alias dt="cd ~/Desktop"
[ -d ~/Developer ] && alias dev="cd ~/Developer"
[ -d ~/Downloads ] && alias dl="cd ~/Downloads"
alias ....="cd ../../.."
alias ...="cd ../.."
alias ..="cd .."
alias l="ls -hlF"
alias ll="ls -ahlF"
alias ls="ls --color=auto"
alias mv="mv -i"
alias o="open ."
alias path="echo $PATH"
alias rmrf="rm -rf"
alias rr="[ -f ~/.zshrc ] && . ~/.zshrc && echo '✅ Successfully reloaded .zshrc'"
alias tt="tree -L 2"
alias ttt="tree -L 3"
alias xx="chmod u+x"

function take() {
    mkdir -p $@ && cd ${@:$#}
}

#
# code tools
#
alias be="bundle exec"
alias c="code"
alias f="fork"
alias fdd="fd --hidden"
alias p="bundle exec pod install"
alias rg="rg --smart-case"
alias rgg="rg --hidden"
alias s="subl"
alias trim-trailing-ws-recursively="perl -pi -e 's/ +$//'"
alias x="xed ."

function xcp() {
    xcode-select --print-path
}

function xcs() {
    sudo xcode-select --switch $(find /Applications -maxdepth 1 -iname 'xcode*.app' | fzf)
}

#
# git
#
alias g="git"
alias ga="git add"
alias gaa="git add --all"
alias gb="git branch"
alias gc="git commit"
alias gcl="git clone --recurse-submodules"
alias gcm="git commit -m"
alias gd="git diff HEAD"
alias gf="git fetch"
alias gl="git pull"
alias glg="git log --stat"
alias gp="git push"
alias gpf="git push --force-with-lease"
alias grhh="git reset --hard HEAD"
alias grv="git remote --verbose"
alias gss="git status --short"
alias gst="git status"
alias gw="git add --all && git commit -m 'work in progress'"

#
# github
#
alias ghprc="gh pr create --web"
alias ghprv="gh pr view --web"

# gw == git work-in-progress
function gw() {
    git add --all && git commit -m "$GIT_WIP_MSG"
}

# switch to a local branch
function gsw() {
    command git rev-parse --git-dir &> /dev/null || return
    if [ $# -eq 0 ];
    then
        local selected_branch=$(git for-each-ref --format='%(refname:short)' refs/heads | sort | fzf)
        [ ! -z "$selected_branch" ] && git switch "$selected_branch"
    else
        git switch "$@"
    fi
}

function gswc() {
    local branch_to_create=$1
    [ -z "$branch_to_create" ] && echo > /dev/stderr "ERROR: no branchname specified" && return 1
    git switch -c "$branch_to_create"
}

# switch to a local branch or check out a remote one
function gswa() {
    command git rev-parse --git-dir &> /dev/null || return
    if [ $# -eq 0 ];
    then
        local selected_branch=$(git for-each-ref --format='%(refname:short)' refs/{heads,remotes} | sed 's/origin\///' | sort | uniq | fzf)
        [ ! -z "$selected_branch" ] && git switch "$selected_branch"
    fi
}

# delete a local git branch but only if fully merged in its upstream branch or in HEAD if no upstream was set
function gbd() {
    command git rev-parse --git-dir &> /dev/null || return
    if [ $# -eq 0 ];
    then
        local selected_branch=$(git for-each-ref --format='%(refname:short)' refs/heads | fzf)
        [ ! -z "$selected_branch" ] && git branch --delete "$selected_branch"
    else
        git branch --delete "$@"
    fi
}

function git-default-branch() {
    basename $(git symbolic-ref --short refs/remotes/origin/HEAD)
}

function grt() {
    local ROOT_COMMIT="$1"
    [ -z "$ROOT_COMMIT" ] && echo "Missing root commit parameter!" && return -1
    local CURRENT_BRANCH=$(git branch --show-current)
    git reset $(git merge-base "$ROOT_COMMIT" "$CURRENT_BRANCH")
}

function git-stale-branches () {
    for branch in $(git branch --remotes | grep --invert-match HEAD); do echo -e `git show --format="%ai by %an" $branch | head -n 1` @ $branch; done | sort --reverse
}

#
# network
#
alias dg="dig +short"
alias myip='echo $(curl --silent https://ifconfig.me)'
alias pyserver="python3 -m http.server"
alias ytv360="yt-dlp --format 'best[height<=360][ext=mp4]/bestvideo[height<=360][ext=mp4]+bestaudio/best'"
alias ytv720="yt-dlp --format 'best[height<=720][ext=mp4]/bestvideo[height<=720][ext=mp4]+bestaudio/best'"
alias yta="yt-dlp --extract-audio --audio-format opus"

#
# image manipulation
#
alias happend="convert +append -gravity center" # horizontal append images
alias vappend="convert -append -gravity center" # vertical append images

alias exif="exiftool -s -G" # group by raw tag names
alias stripexif="exiftool -all= -overwrite_original" # strip exif in-place

# --------------------
#
# FUNCTIONS
#
# --------------------

function lowercase_filenames_in_dir() {
    for f in *; do mv "$f" "$f.tmp"; mv "$f.tmp" "$(echo $f | tr '[:upper:]' '[:lower:]')"; done
}

# DateTimeOriginal == the time of the shutter actuation
# CreateDate == the time that the file was written to storage
function rename_files_using_exif() {
    FORMAT='media_%Y-%m-%d_%H.%M.%S%%-c.%%le'

    # [0] lowercase all filenames & extensions of all supported media types + aae
    # exiftool -filename=%lf.%le -ext+ aae .

    # [1] rename all .aae files to the date tag of their corresponding media file (if available)
    exiftool -ext aae -progress -ee -dateFormat "$FORMAT" \
             -tagsfromfile %d%f.mov "-FileName<CreationDate" \
             -tagsfromfile %d%f.jpg "-FileName<DateTimeOriginal" \
             -tagsfromfile %d%f.png "-FileName<DateTimeOriginal" .

    # [2] rename all media files
    # QuickTime::CreationDate for MOV files. Uses the original timezone.
    exiftool -progress -ee -dateFormat "$FORMAT" '-FileName<CreationDate' -ext mov .
    # EXIF::DateTimeOriginal for images. Uses the original timezone.
    exiftool -fixBase -progress -ee -dateFormat "$FORMAT" '-FileName<DateTimeOriginal' -ext jpg -ext png .
}

#
# misc
#

function openports() {
    lsof -PiTCP -sTCP:LISTEN
}

function dnsflush() {
    sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder
}

function btrestart() {
    sudo pkill bluetoothd
}

function dock_clear_all() {
    defaults write com.apple.dock persistent-apps -array
    killall Dock
}

function dock_spacer_add3() {
    defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}'
    defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}'
    defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}'
    killall Dock
}

#
# Homebrew
#

[ -z "$HOMEBREW_PREFIX" ] && export HOMEBREW_PREFIX=$(brew --prefix)

#
# Ruby
#
export PATH="${HOMEBREW_PREFIX}/opt/ruby@3/bin:${PATH}"

#
# fzf
#
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
function fcd() {
    cd $(fd --type d | fzf)
}

function fs() {
    local files_to_open=$(fd --type f | fzf --multi)
    [ -z "$files_to_open" ] && echo > /dev/stderr "ERROR: no files to open" && return 1
    subl "$files_to_open"
}

# extensions
include "${HOMEBREW_PREFIX}/etc/profile.d/z.sh"
include "${HOMEBREW_PREFIX}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

# source customizations specific to the current host
include "${HOME}/.local.zsh"
